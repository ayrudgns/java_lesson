package koreait.day02;

// 변수 : Variable
public class C05_IntegerVar {
	public static void main(String[] args) {		// main 메소드 시작
/*	
 * 	1. main 메소드 안에서만 사용하는 지역변수를 선언합니다.
 *	2. 기본형 (primitive) 데이터 타입 :
 * 		정수형식 byte, short, int, long 키워드(역할이 정해진 단어)
 */
		byte n1;		// byte 형식의 데이터를 저장할 공간. 이름은 n1
		short n2;
		int n3;
		long n4;		// 변수의 선언 (지역변수의 선언)

		// 변수를 선언하면서 초기값 부여 (선언과 동시에 초기화)
		byte m1 = 100;
		short m2 = 100;
		int m3 = 100;
		long m4 = 100;
		
		int currentNo;	// 변수명은 실제 저장되는 값을 쉽게 파악할 수 있는 단어로 만드는 것이 좋다.
		
//		System.out.println(n1);		// 오류 : 값이 없는 변수 (초기화되지 않음, 초기값이 없음)
		System.out.println(m1);
		
		// 값의 대입(=), 대입문 ==> 등호를 기준으로 오른쪽을 왼쪽에 저장한다.
		n1 = 123;		// 123은 4바이트 리터럴(int), byte나 short는 별도의 리터럴 표기 방식이 없음.
						// 따라서 값이 넘치지 않을 경우 자동으로 1바이트 또는 2바이트로 크기가 바뀌어 저장됨.
//		n1 = 999;		// 오류 : 127보다 큰 값 (byte 범위 외)
		n2 = 29999;
//		n2 = -40000;	// 오류 : -32768보다 작은 값 (short 범위 외)
		n3 = 123456789;
//		n3 = 1234567890123;	// 오류 : 2147473647보다 큰 값 (int 범위 외)
//		n4 = 1234567890123;	// 오류 : 1234567890123 리터럴은 int 리터럴이므로 표현 오류, 그냥 쓰면 리터럴이고 리터럴은 int임.
		n4 = 123;			// 오류 아님 : 123 리터럴은 int 리터럴 표현 범위 내에 있기 때문이다.
		n4 = 1234567890123L;	// long 리터럴 표시 : L 또는 l을 마지막에 쓴다.
		// 소주잔과 맥주잔
		
		System.out.println("변수 n1 = " + n1);
		System.out.println("변수 n2 = " + n2);
		System.out.printf("변수 %s = %d \n", "n3", n3);
		System.out.printf("변수 %s = %d \n", "n4", n4);

	}	// main 메소드 끝	==> 여기까지만 지역변수의 사용이 가능하다.
	// 대입문 또는 리터럴 표시에서 값의 범위가 넘어가면 overflow(오버플로우)
}
/*
 *	변수 : 메모리에 저장된 값 중에서 변경할 수 있는 데이터를 말합니다.
 *		변수는 프로그램이 실행되는 동안에 임시로 사용하는 메모리 공간입니다.
 *		데이터가 저장된 메모리에 접근하기 위해서 변수명(식별자, 중복되는 이름 사용 불가능)을 부여합니다.
 *    	변수를 선언한다. (변수명과 데이터 형식을 지정하는 것.) -> 메모리에 공간이 할당 됩니다.
 *    	조사할 내용 : 변수를 선언할 때의 규칙
 */

